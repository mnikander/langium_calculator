/******************************************************************************
 * This file was generated by langium-cli 3.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const CalculatorTerminals = {
    WS: /\s+/,
    FLOAT: /[-+]?((\d+\.\d*)|(\d*\.\d+))/,
    INT: /[-+]?[0-9]+/,
    SL_COMMENT: /\#[^\n\r]*/,
};

export type CalculatorTerminalNames = keyof typeof CalculatorTerminals;

export type CalculatorKeywordNames = 
    | "%"
    | "("
    | ")"
    | "*"
    | "+"
    | "-"
    | "/"
    | "^"
    | "sqrt";

export type CalculatorTokenNames = CalculatorTerminalNames | CalculatorKeywordNames;

export interface Application extends AstNode {
    readonly $container: Application | Model;
    readonly $type: 'Application';
    arguments: Array<Application | Float | Integer>;
    operator: Binary | Unary;
}

export const Application = 'Application';

export function isApplication(item: unknown): item is Application {
    return reflection.isInstance(item, Application);
}

export interface Binary extends AstNode {
    readonly $container: Application;
    readonly $type: 'Binary';
    value: '%' | '*' | '+' | '-' | '/' | '^';
}

export const Binary = 'Binary';

export function isBinary(item: unknown): item is Binary {
    return reflection.isInstance(item, Binary);
}

export interface Float extends AstNode {
    readonly $container: Application | Model;
    readonly $type: 'Float';
    value: number;
}

export const Float = 'Float';

export function isFloat(item: unknown): item is Float {
    return reflection.isInstance(item, Float);
}

export interface Integer extends AstNode {
    readonly $container: Application | Model;
    readonly $type: 'Integer';
    value: number;
}

export const Integer = 'Integer';

export function isInteger(item: unknown): item is Integer {
    return reflection.isInstance(item, Integer);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    expressions: Array<Application | Float | Integer>;
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export interface Unary extends AstNode {
    readonly $container: Application;
    readonly $type: 'Unary';
    value: 'sqrt';
}

export const Unary = 'Unary';

export function isUnary(item: unknown): item is Unary {
    return reflection.isInstance(item, Unary);
}

export type CalculatorAstType = {
    Application: Application
    Binary: Binary
    Float: Float
    Integer: Integer
    Model: Model
    Unary: Unary
}

export class CalculatorAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [Application, Binary, Float, Integer, Model, Unary];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case Application: {
                return {
                    name: Application,
                    properties: [
                        { name: 'arguments', defaultValue: [] },
                        { name: 'operator' }
                    ]
                };
            }
            case Binary: {
                return {
                    name: Binary,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case Float: {
                return {
                    name: Float,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case Integer: {
                return {
                    name: Integer,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case Model: {
                return {
                    name: Model,
                    properties: [
                        { name: 'expressions', defaultValue: [] }
                    ]
                };
            }
            case Unary: {
                return {
                    name: Unary,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new CalculatorAstReflection();
