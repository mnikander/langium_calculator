/******************************************************************************
 * This file was generated by langium-cli 3.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const CalculatorTerminals = {
    Binary: /(((((\+|-)|\*)|\/)|%)|\^)/,
    WS: /\s+/,
    INT: /[0-9]+/,
    SL_COMMENT: /\#[^\n\r]*/,
};

export type CalculatorTerminalNames = keyof typeof CalculatorTerminals;

export type CalculatorKeywordNames = 
    | "("
    | ")";

export type CalculatorTokenNames = CalculatorTerminalNames | CalculatorKeywordNames;

export interface Application extends AstNode {
    readonly $container: Application | Model;
    readonly $type: 'Application';
    arguments: Array<Application | number>;
    operator: string;
}

export const Application = 'Application';

export function isApplication(item: unknown): item is Application {
    return reflection.isInstance(item, Application);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    expressions: Array<Application | number>;
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export type CalculatorAstType = {
    Application: Application
    Model: Model
}

export class CalculatorAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [Application, Model];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case Application: {
                return {
                    name: Application,
                    properties: [
                        { name: 'arguments', defaultValue: [] },
                        { name: 'operator' }
                    ]
                };
            }
            case Model: {
                return {
                    name: Model,
                    properties: [
                        { name: 'expressions', defaultValue: [] }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new CalculatorAstReflection();
