/******************************************************************************
 * This file was generated by langium-cli 3.3.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import type { AstNode, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';

export const CalculatorTerminals = {
    WS: /\s+/,
    INT: /[0-9]+/,
    SL_COMMENT: /\#[^\n\r]*/,
};

export type CalculatorTerminalNames = keyof typeof CalculatorTerminals;

export type CalculatorKeywordNames = 
    | "("
    | ")"
    | "+"
    | "-";

export type CalculatorTokenNames = CalculatorTerminalNames | CalculatorKeywordNames;

export interface Expression extends AstNode {
    readonly $container: Expression | Model;
    readonly $type: 'Expression';
    arguments: Array<Expression>;
    binary_operator?: '+' | '-';
    value?: Integer;
}

export const Expression = 'Expression';

export function isExpression(item: unknown): item is Expression {
    return reflection.isInstance(item, Expression);
}

export interface Integer extends AstNode {
    readonly $container: Expression;
    readonly $type: 'Integer';
    value: number;
}

export const Integer = 'Integer';

export function isInteger(item: unknown): item is Integer {
    return reflection.isInstance(item, Integer);
}

export interface Model extends AstNode {
    readonly $type: 'Model';
    expressions: Array<Expression>;
}

export const Model = 'Model';

export function isModel(item: unknown): item is Model {
    return reflection.isInstance(item, Model);
}

export type CalculatorAstType = {
    Expression: Expression
    Integer: Integer
    Model: Model
}

export class CalculatorAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return [Expression, Integer, Model];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case Expression: {
                return {
                    name: Expression,
                    properties: [
                        { name: 'arguments', defaultValue: [] },
                        { name: 'binary_operator' },
                        { name: 'value' }
                    ]
                };
            }
            case Integer: {
                return {
                    name: Integer,
                    properties: [
                        { name: 'value' }
                    ]
                };
            }
            case Model: {
                return {
                    name: Model,
                    properties: [
                        { name: 'expressions', defaultValue: [] }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    properties: []
                };
            }
        }
    }
}

export const reflection = new CalculatorAstReflection();
